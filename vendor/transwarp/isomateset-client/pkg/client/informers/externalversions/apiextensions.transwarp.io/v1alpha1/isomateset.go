/*

Copyright 2019 Transwarp All rights reserved.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"
	versioned "transwarp/isomateset-client/pkg/client/clientset/versioned"
	internalinterfaces "transwarp/isomateset-client/pkg/client/informers/externalversions/internalinterfaces"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	apiextensionstranswarpiov1alpha1 "transwarp/isomateset-client/pkg/apis/apiextensions.transwarp.io/v1alpha1"
	v1alpha1 "transwarp/isomateset-client/pkg/client/listers/apiextensions.transwarp.io/v1alpha1"
)

// IsomateSetInformer provides access to a shared informer and lister for
// IsomateSets.
type IsomateSetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.IsomateSetLister
}

type isomateSetInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewIsomateSetInformer constructs a new informer for IsomateSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewIsomateSetInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredIsomateSetInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredIsomateSetInformer constructs a new informer for IsomateSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredIsomateSetInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiextensionsV1alpha1().IsomateSets(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiextensionsV1alpha1().IsomateSets(namespace).Watch(options)
			},
		},
		&apiextensionstranswarpiov1alpha1.IsomateSet{},
		resyncPeriod,
		indexers,
	)
}

func (f *isomateSetInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredIsomateSetInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *isomateSetInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiextensionstranswarpiov1alpha1.IsomateSet{}, f.defaultInformer)
}

func (f *isomateSetInformer) Lister() v1alpha1.IsomateSetLister {
	return v1alpha1.NewIsomateSetLister(f.Informer().GetIndexer())
}
