// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	k8s "WarpCloud/walm/pkg/models/k8s"

	mock "github.com/stretchr/testify/mock"

	release "WarpCloud/walm/pkg/models/release"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// CreateOrUpdateReleaseCache provides a mock function with given fields: releaseCache
func (_m *Cache) CreateOrUpdateReleaseCache(releaseCache *release.ReleaseCache) error {
	ret := _m.Called(releaseCache)

	var r0 error
	if rf, ok := ret.Get(0).(func(*release.ReleaseCache) error); ok {
		r0 = rf(releaseCache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateReleaseTask provides a mock function with given fields: releaseTask
func (_m *Cache) CreateOrUpdateReleaseTask(releaseTask *release.ReleaseTask) error {
	ret := _m.Called(releaseTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(*release.ReleaseTask) error); ok {
		r0 = rf(releaseTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReleaseBackUp provides a mock function with given fields: namespace, name, releaseInfoV2Byte
func (_m *Cache) CreateReleaseBackUp(namespace string, name string, releaseInfoV2Byte []byte) error {
	ret := _m.Called(namespace, name, releaseInfoV2Byte)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(namespace, name, releaseInfoV2Byte)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReleaseCache provides a mock function with given fields: namespace, name
func (_m *Cache) DeleteReleaseCache(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReleaseTask provides a mock function with given fields: namespace, name
func (_m *Cache) DeleteReleaseTask(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReleaseBackUp provides a mock function with given fields: namespace, name
func (_m *Cache) GetReleaseBackUp(namespace string, name string) (*release.ReleaseInfoV2, error) {
	ret := _m.Called(namespace, name)

	var r0 *release.ReleaseInfoV2
	if rf, ok := ret.Get(0).(func(string, string) *release.ReleaseInfoV2); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ReleaseInfoV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseCache provides a mock function with given fields: namespace, name
func (_m *Cache) GetReleaseCache(namespace string, name string) (*release.ReleaseCache, error) {
	ret := _m.Called(namespace, name)

	var r0 *release.ReleaseCache
	if rf, ok := ret.Get(0).(func(string, string) *release.ReleaseCache); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ReleaseCache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseCaches provides a mock function with given fields: namespace, filter
func (_m *Cache) GetReleaseCaches(namespace string, filter string) ([]*release.ReleaseCache, error) {
	ret := _m.Called(namespace, filter)

	var r0 []*release.ReleaseCache
	if rf, ok := ret.Get(0).(func(string, string) []*release.ReleaseCache); ok {
		r0 = rf(namespace, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseCache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseCachesByReleaseConfigs provides a mock function with given fields: releaseConfigs
func (_m *Cache) GetReleaseCachesByReleaseConfigs(releaseConfigs []*k8s.ReleaseConfig) ([]*release.ReleaseCache, error) {
	ret := _m.Called(releaseConfigs)

	var r0 []*release.ReleaseCache
	if rf, ok := ret.Get(0).(func([]*k8s.ReleaseConfig) []*release.ReleaseCache); ok {
		r0 = rf(releaseConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseCache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*k8s.ReleaseConfig) error); ok {
		r1 = rf(releaseConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseTask provides a mock function with given fields: namespace, name
func (_m *Cache) GetReleaseTask(namespace string, name string) (*release.ReleaseTask, error) {
	ret := _m.Called(namespace, name)

	var r0 *release.ReleaseTask
	if rf, ok := ret.Get(0).(func(string, string) *release.ReleaseTask); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ReleaseTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseTasks provides a mock function with given fields: namespace, filter
func (_m *Cache) GetReleaseTasks(namespace string, filter string) ([]*release.ReleaseTask, error) {
	ret := _m.Called(namespace, filter)

	var r0 []*release.ReleaseTask
	if rf, ok := ret.Get(0).(func(string, string) []*release.ReleaseTask); ok {
		r0 = rf(namespace, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseTasksByReleaseConfigs provides a mock function with given fields: releaseConfigs
func (_m *Cache) GetReleaseTasksByReleaseConfigs(releaseConfigs []*k8s.ReleaseConfig) ([]*release.ReleaseTask, error) {
	ret := _m.Called(releaseConfigs)

	var r0 []*release.ReleaseTask
	if rf, ok := ret.Get(0).(func([]*k8s.ReleaseConfig) []*release.ReleaseTask); ok {
		r0 = rf(releaseConfigs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*k8s.ReleaseConfig) error); ok {
		r1 = rf(releaseConfigs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReleasesBackUp provides a mock function with given fields: namespace
func (_m *Cache) ListReleasesBackUp(namespace string) ([]*release.ReleaseInfoV2, error) {
	ret := _m.Called(namespace)

	var r0 []*release.ReleaseInfoV2
	if rf, ok := ret.Get(0).(func(string) []*release.ReleaseInfoV2); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseInfoV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
