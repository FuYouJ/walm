// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	project "WarpCloud/walm/pkg/models/project"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// CreateOrUpdateProjectTask provides a mock function with given fields: projectTask
func (_m *Cache) CreateOrUpdateProjectTask(projectTask *project.ProjectTask) error {
	ret := _m.Called(projectTask)

	var r0 error
	if rf, ok := ret.Get(0).(func(*project.ProjectTask) error); ok {
		r0 = rf(projectTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProjectTask provides a mock function with given fields: namespace, name
func (_m *Cache) DeleteProjectTask(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProjectTask provides a mock function with given fields: namespace, name
func (_m *Cache) GetProjectTask(namespace string, name string) (*project.ProjectTask, error) {
	ret := _m.Called(namespace, name)

	var r0 *project.ProjectTask
	if rf, ok := ret.Get(0).(func(string, string) *project.ProjectTask); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.ProjectTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectTasks provides a mock function with given fields: namespace
func (_m *Cache) GetProjectTasks(namespace string) ([]*project.ProjectTask, error) {
	ret := _m.Called(namespace)

	var r0 []*project.ProjectTask
	if rf, ok := ret.Get(0).(func(string) []*project.ProjectTask); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*project.ProjectTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
