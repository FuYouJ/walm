// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Redis is an autogenerated mock type for the Redis type
type Redis struct {
	mock.Mock
}

// DeleteField provides a mock function with given fields: key, namespace, name
func (_m *Redis) DeleteField(key string, namespace string, name string) error {
	ret := _m.Called(key, namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(key, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFieldValue provides a mock function with given fields: key, namespace, name
func (_m *Redis) GetFieldValue(key string, namespace string, name string) (string, error) {
	ret := _m.Called(key, namespace, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(key, namespace, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(key, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldValues provides a mock function with given fields: key, namespace, filter
func (_m *Redis) GetFieldValues(key string, namespace string, filter string) ([]string, error) {
	ret := _m.Called(key, namespace, filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(key, namespace, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(key, namespace, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldValuesByNames provides a mock function with given fields: key, filedNames
func (_m *Redis) GetFieldValuesByNames(key string, filedNames ...string) ([]string, error) {
	_va := make([]interface{}, len(filedNames))
	for _i := range filedNames {
		_va[_i] = filedNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, ...string) []string); ok {
		r0 = rf(key, filedNames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(key, filedNames...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeys provides a mock function with given fields: regex
func (_m *Redis) GetKeys(regex string) ([]string, error) {
	ret := _m.Called(regex)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(regex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(regex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValue provides a mock function with given fields: key
func (_m *Redis) GetValue(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFieldValues provides a mock function with given fields: key, fieldValues
func (_m *Redis) SetFieldValues(key string, fieldValues map[string]interface{}) error {
	ret := _m.Called(key, fieldValues)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(key, fieldValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKeyWithTTL provides a mock function with given fields: key, value, duration
func (_m *Redis) SetKeyWithTTL(key string, value interface{}, duration time.Duration) error {
	ret := _m.Called(key, value, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
