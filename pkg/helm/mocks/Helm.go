// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "WarpCloud/walm/pkg/models/common"

import mock "github.com/stretchr/testify/mock"
import release "WarpCloud/walm/pkg/models/release"

// Helm is an autogenerated mock type for the Helm type
type Helm struct {
	mock.Mock
}

// DeleteRelease provides a mock function with given fields: namespace, name
func (_m *Helm) DeleteRelease(namespace string, name string) error {
	ret := _m.Called(namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChartAutoDependencies provides a mock function with given fields: repoName, chartName, chartVersion
func (_m *Helm) GetChartAutoDependencies(repoName string, chartName string, chartVersion string) ([]string, error) {
	ret := _m.Called(repoName, chartName, chartVersion)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(repoName, chartName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(repoName, chartName, chartVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartDetailInfo provides a mock function with given fields: repoName, chartName, chartVersion
func (_m *Helm) GetChartDetailInfo(repoName string, chartName string, chartVersion string) (*release.ChartDetailInfo, error) {
	ret := _m.Called(repoName, chartName, chartVersion)

	var r0 *release.ChartDetailInfo
	if rf, ok := ret.Get(0).(func(string, string, string) *release.ChartDetailInfo); ok {
		r0 = rf(repoName, chartName, chartVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ChartDetailInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(repoName, chartName, chartVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartList provides a mock function with given fields: repoName
func (_m *Helm) GetChartList(repoName string) (*release.ChartInfoList, error) {
	ret := _m.Called(repoName)

	var r0 *release.ChartInfoList
	if rf, ok := ret.Get(0).(func(string) *release.ChartInfoList); ok {
		r0 = rf(repoName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ChartInfoList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDependencyOutputConfigs provides a mock function with given fields: namespace, dependencies, chartInfo
func (_m *Helm) GetDependencyOutputConfigs(namespace string, dependencies map[string]string, chartInfo *release.ChartDetailInfo) (map[string]interface{}, error) {
	ret := _m.Called(namespace, dependencies, chartInfo)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]string, *release.ChartDetailInfo) map[string]interface{}); ok {
		r0 = rf(namespace, dependencies, chartInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string, *release.ChartDetailInfo) error); ok {
		r1 = rf(namespace, dependencies, chartInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailChartInfoByImage provides a mock function with given fields: chartImage
func (_m *Helm) GetDetailChartInfoByImage(chartImage string) (*release.ChartDetailInfo, error) {
	ret := _m.Called(chartImage)

	var r0 *release.ChartDetailInfo
	if rf, ok := ret.Get(0).(func(string) *release.ChartDetailInfo); ok {
		r0 = rf(chartImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ChartDetailInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chartImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepoList provides a mock function with given fields:
func (_m *Helm) GetRepoList() *release.RepoInfoList {
	ret := _m.Called()

	var r0 *release.RepoInfoList
	if rf, ok := ret.Get(0).(func() *release.RepoInfoList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.RepoInfoList)
		}
	}

	return r0
}

// InstallOrCreateRelease provides a mock function with given fields: namespace, releaseRequest, chartFiles, dryRun, update, oldReleaseInfo, paused
func (_m *Helm) InstallOrCreateRelease(namespace string, releaseRequest *release.ReleaseRequestV2, chartFiles []*common.BufferedFile, dryRun bool, update bool, oldReleaseInfo *release.ReleaseInfoV2, paused *bool) (*release.ReleaseCache, error) {
	ret := _m.Called(namespace, releaseRequest, chartFiles, dryRun, update, oldReleaseInfo, paused)

	var r0 *release.ReleaseCache
	if rf, ok := ret.Get(0).(func(string, *release.ReleaseRequestV2, []*common.BufferedFile, bool, bool, *release.ReleaseInfoV2, *bool) *release.ReleaseCache); ok {
		r0 = rf(namespace, releaseRequest, chartFiles, dryRun, update, oldReleaseInfo, paused)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.ReleaseCache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *release.ReleaseRequestV2, []*common.BufferedFile, bool, bool, *release.ReleaseInfoV2, *bool) error); ok {
		r1 = rf(namespace, releaseRequest, chartFiles, dryRun, update, oldReleaseInfo, paused)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllReleases provides a mock function with given fields:
func (_m *Helm) ListAllReleases() ([]*release.ReleaseCache, error) {
	ret := _m.Called()

	var r0 []*release.ReleaseCache
	if rf, ok := ret.Get(0).(func() []*release.ReleaseCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*release.ReleaseCache)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
